#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('peer-server:server');
var fs = require('fs');
const ExpressPeerServer = require('peer').ExpressPeerServer;

const credentials = {
  key: fs.readFileSync("/etc/letsencrypt/live/live.democracy.earth/privkey.pem"),
  cert: fs.readFileSync("/etc/letsencrypt/live/live.democracy.earth/cert.pem")
}

var connectedPeers = [];
var messages = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('https').createServer(credentials, app);

const options = {
  debug: true
}

const peerserver = ExpressPeerServer(server, options);
app.use('/peerjs', peerserver);

peerserver.on('connection', async client => {
  console.log(`Client connected: ${client}`);
});

peerserver.on('disconnect', async client => {
  console.log(`Client disconnected: ${client}`);
});

var serverWebSocket = require('https').createServer(credentials);

const WebSocket = require('ws');

const wss = new WebSocket.Server({ server: serverWebSocket });

const getConnectedPeers = () => {
  return JSON.stringify({
    type: 'peers', connectedPeers
  })
}

const getMessages = () => {
  return JSON.stringify({
    type: 'allMessages', allMessages: messages
  })
}

const broadcast = (data) => {
  wss.clients.forEach(socketClient => {
    if (socketClient.readyState === WebSocket.OPEN) {
      socketClient.send(data);
    }
  });
}

wss.on('connection', function connection(ws) {

  ws.on('message', async function incoming(data) {
    let income = JSON.parse(data);
    console.log(income);

    switch (income.type) {
      case 'message':
        messages.push(income.message);
        broadcast(JSON.stringify(income));
        break;
      case 'allMessages':
        ws.send(getMessages());
        break;
      case 'peers':
        ws.send(getConnectedPeers());
        break;
      case 'updatePeers':
        ws.send(getPeers());
        break;
      case 'connect':
        console.log(income.message.peerId)
        console.log(income.message)

        await connectedPeers.push(income.message.peerId)
        broadcast(getConnectedPeers())
        break;
      case 'disconnect':
        console.log(income.message.peerId)
        console.log(income.message)

        await connectedPeers.splice(connectedPeers.indexOf(income.message.peerId), 1);
        broadcast(getConnectedPeers())
        break;
      default:
        console.log("Message from websock not indentified");
    }
  });

  ws.on('close', () => {
    console.log('stopping client');
  });
});

setTimeout(() => {
  if (connectedPeers.length === 0) {
    messages.splice(0, messages.length);
  }
}, 5000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

serverWebSocket.listen(normalizePort(process.env.PORT2 || '5050'));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('peer-server:server');
var http = require('http');
var fs = require('fs');
const ExpressPeerServer = require('peer').ExpressPeerServer;
var connectedPeers = [];
var messages = [];

const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 5050 });

const getConnectedPeers = () => {
  return JSON.stringify({
    type: 'peers', connectedPeers
  })
}

const getMessages = () => {
  return JSON.stringify({
    type: 'allMessages', allMessages: messages
  })
}

const broadcast = (data) => {
  wss.clients.forEach(socketClient => {
    if (socketClient.readyState === WebSocket.OPEN) {
      socketClient.send(data);
    }
  });
}

wss.on('connection', function connection(ws) {

  ws.on('message', function incoming(data) {
    let income = JSON.parse(data);
    console.log("recebeu data");
    console.log(income);

    if (income.type === 'message') {
      messages.push(income.message);
      broadcast(JSON.stringify(income));
    }

    if (income.type === 'allMessages') {
      ws.send(getMessages());
    }

    if (income.type === 'peers') {
      ws.send(getConnectedPeers());
    }
  });

  ws.on('close', () => {
    if (wss.clients.lenght === 0) {
      // connectedPeers = [];
      // messages = [];
    }
    console.log('stopping client');
  });
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const options = {
  // ssl: {
  //   key: fs.readFileSync('/Users/cleberw3b/dev/cert/localhost.key'),
  //   cert: fs.readFileSync('/Users/cleberw3b/dev/cert/localhost.crt')
  // },
  debug: true
}

const peerserver = ExpressPeerServer(server, options);
app.use('/peerjs', peerserver);


peerserver.on('connection', async client => {
  console.log(`Client connected: ${client}`);
  await connectedPeers.push(client);
  broadcast(getConnectedPeers());
});

peerserver.on('disconnect', async client => {
  console.log(`Client disconnected: ${client}`);
  await connectedPeers.splice(connectedPeers.indexOf(client), 1);
  broadcast(getConnectedPeers());
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
